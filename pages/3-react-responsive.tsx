import { Desktop, Mobile, Tablet } from "@/components/components";
import React, { FC, PropsWithChildren, useEffect, useState } from "react";
import { useMediaQuery, Context as ResponsiveContext } from "react-responsive";
import styles from "@/styles/Home.module.css";
import { Atomic_Age } from "next/font/google";
import Head from "next/head";

const atomic_Age = Atomic_Age({ weight: "400", subsets: ["latin"] });

const DesktopMedia: FC<PropsWithChildren> = ({ children }) => {
    const isDesktop = useMediaQuery({ minWidth: 992 });
    return isDesktop ? <>{children}</> : null;
};

const TabletMedia: FC<PropsWithChildren> = ({ children }) => {
    const isTablet = useMediaQuery({ minWidth: 768, maxWidth: 991 });
    return isTablet ? <>{children}</> : null;
};

const MobileMedia: FC<PropsWithChildren> = ({ children }) => {
    const isMobile = useMediaQuery({ maxWidth: 767 });
    return isMobile ? <>{children}</> : null;
};

function ReactResponsive() {
    return (
        <>
            <MobileMedia>
                <Mobile />
            </MobileMedia>
            <TabletMedia>
                <Tablet />
            </TabletMedia>
            <DesktopMedia>
                <Desktop />
            </DesktopMedia>
        </>
    );
}

export default function ReactResponsivePage() {
    const [hydrated, setHydrated] = useState(false);

	useEffect(() => {
		setHydrated(true);
	}, []);

    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className={`${styles.main} ${atomic_Age.className}`}>
                <ResponsiveContext.Provider
                    value={hydrated ? undefined : { width: 1600 }}
                >
                    <ReactResponsive />
                </ResponsiveContext.Provider>
            </main>
        </>
    );
}
